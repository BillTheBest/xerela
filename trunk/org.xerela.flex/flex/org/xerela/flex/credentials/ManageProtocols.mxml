<?xml version="1.0" encoding="utf-8"?>
<AddrSetManagement
      xmlns:mx="http://www.adobe.com/2006/mxml"
      xmlns="org.xerela.flex.credentials.*"
      title="@Resource(key='ManageProtocols_title', bundle='messages')"
      description="@Resource(key='ManageProtocols_message', bundle='messages')">
    <mx:Script>
        <![CDATA[
        	import mx.controls.TextInput;
        	import mx.controls.Text;
        	import mx.controls.Label;
        	import mx.containers.GridRow;
        	import mx.collections.ListCollectionView;
        	import mx.collections.Sort;
        	import mx.rpc.events.ResultEvent;
        	import mx.collections.ArrayCollection;
        	import org.xerela.flex.services.ResultElf;
        	import org.xerela.flex.services.WebServiceElf;

            private var _addrSet:AddrSet;
            private var _name:String;
            private var _priority:int;

            override protected function createConfig(name:String, priority:int):void
            {
            	_name = name;
            	_priority = priority;
            	WebServiceElf.call('credentials', 'getNewFullProtocolConfig', newConfig);
            }

            private function newConfig(event:ResultEvent):void
            {
            	var config:Object = event.result;
            	config.priority = _priority;
            	config.name = _name;
            	configCreated(config);
            }

            override protected function remove(addrSet:AddrSet):void
            {
                WebServiceElf.call('credentials', 'deleteProtocolConfig', null, addrSet.config);
            }

            override protected function save(addrSet:AddrSet):void
            {
                WebServiceElf.call('credentials', 'saveProtocolConfig', null, addrSet.config);
            }

            override protected function saveDefault(addrSet:AddrSet):void
            {
                WebServiceElf.call('credentials', 'saveDefaultProtocolConfig', null, addrSet.config);
            }

            override protected function requestConfigs():void
            {
                WebServiceElf.call('credentials', 'getAllProtocolConfigs', setConfigs);
                WebServiceElf.call('credentials', 'getDefaultProtocolConfig', setDefaultConfig);
            }

            override protected function set selectedAddrSet(addrSet:AddrSet):void
            {
                _addrSet = addrSet;

                var protocols:ArrayCollection = ResultElf.array(addrSet.config.protocols);
                addrSet.config.protocols = protocols;

                var sort:Sort = new Sort();
                sort.compareFunction = compareProtocols;
                protocols.sort = sort;
                protocols.refresh();

                _listProtocols.dataProvider = protocols;
                _listProtocols.selectedIndex = 0;
                protocolSelected();
            }

            internal function switchEnablement(protocol:Object):void
            {
            	protocol.enabled = !protocol.enabled;
                _addrSet.changeState(AddrSet.MODIFIED);
            }

            private function compareProtocols(a:Object, b:Object, fields:Array = null):int
            {
            	var dif:int = a.priority - b.priority
            	if (dif == 0)
            	{
            		return 0;
            	}
            	else if (dif < 0)
            	{
            		return -1;
            	}
            	else
            	{
            		return 1;
            	}
            }

            private function moveProtoUp(proto:Object):void
            {
                swapProtos(proto, -1);
            }

            private function moveProtoDown(proto:Object):void
            {
                swapProtos(proto, 1);
            }

            private function swapProtos(proto:Object, offset:int):void
            {
                var protos:ListCollectionView = ListCollectionView(_listProtocols.dataProvider);
                var ndx:int = _listProtocols.selectedIndex;
                var otherNdx:int = ndx + offset;

                if (ndx == -1 || otherNdx < 0 || otherNdx >= protos.length)
                {
                    // can't swap with no selection or the top or bottom element.
                    return;
                }

                var other:Object = protos.getItemAt(otherNdx);

                var p:int = other.priority;
                other.priority = proto.priority;
                proto.priority = p;
                protos.refresh();

                _addrSet.changeState(AddrSet.MODIFIED);
            }

            private function protocolSelected():void
            {
            	_properties.removeAllChildren();

            	var proto:Object = _listProtocols.selectedItem;
            	if (proto == null)
            	{
            		return;
            	}

                var port:PropertyControl = new PropertyControl();
                port.label = "Port";
                port.value = String(proto.port);
                port.addEventListener(Event.CHANGE, portChanged);

                _properties.addChild(port);

                var props:ArrayCollection = ResultElf.array(proto.properties);
                proto.properties = props;
                for each (var property:Object in props)
                {
                	var pc:PropertyControl = new PropertyControl();
                	pc.label = property.key;
                	pc.value = property.value;
                	pc.data = property;
                	pc.addEventListener(Event.CHANGE, propChanged);
                	_properties.addChild(pc);
                }
            }

            private function propChanged(event:Event):void
            {
                var proto:Object = _listProtocols.selectedItem;
                if (proto == null)
                {
                    return;
                }

                var pc:PropertyControl = PropertyControl(event.currentTarget);
                pc.data.value = pc.value; 
                _addrSet.changeState(AddrSet.MODIFIED);
            }

            private function portChanged(event:Event):void
            {
            	var proto:Object = _listProtocols.selectedItem;
                if (proto == null)
                {
                    return;
                }

                proto.port = int(PropertyControl(event.currentTarget).value);
                _addrSet.changeState(AddrSet.MODIFIED);
            }
    	]]>
    </mx:Script>
    <configControl>
        <mx:HBox width="100%" height="100%">
        	<mx:VBox
                  width="100%" height="100%"
                  verticalGap="0"
                  horizontalAlign="right">
			    <mx:List
			          id="_listProtocols"
			          change="protocolSelected()"
			          rowCount="8"
			          width="100%" height="100%">
			        <mx:itemRenderer>
			            <mx:Component>
			                <mx:CheckBox
			                      label="{data.name}"
			                      selected="{data.enabled}"
			                      change="outerDocument.switchEnablement(data)" />
			            </mx:Component>
			        </mx:itemRenderer>
			    </mx:List>
                <mx:ButtonBar itemClick="this[event.item.click](_listProtocols.selectedItem)">
                    <mx:Array>
                        <mx:Object icon="@Embed('/img/up.gif')" click="moveProtoUp" toolTip="@Resource(key='ManageProtocols_moveProtoUp', bundle='messages')" />
                        <mx:Object icon="@Embed('/img/down.gif')" click="moveProtoDown" toolTip="@Resource(key='ManageProtocols_moveProtoDown', bundle='messages')" />
                    </mx:Array>
                </mx:ButtonBar>
        	</mx:VBox>
        	<mx:VRule height="100%" />
        	<mx:VBox
                  width="100%" height="100%">
                <mx:Label text="{_listProtocols.selectedItem.name}" fontWeight="bold"/>
                <mx:Grid id="_properties" />
        	</mx:VBox>
        </mx:HBox>
    </configControl>
</AddrSetManagement>
