<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
      xmlns:mx="http://www.adobe.com/2006/mxml"
      xmlns:credentials="org.xerela.flex.credentials.*"
      creationComplete="init()">
    <mx:Metadata>
        [ResourceBundle('messages')]
    </mx:Metadata>
    <mx:Script>
    	<![CDATA[
    		import org.xerela.flex.NetworkAddressElf;
    		import mx.rpc.events.ResultEvent;
    		import mx.collections.Sort;
    		import org.xerela.flex.services.ResultElf;
    		import org.xerela.flex.InputWindow;
    		import mx.collections.ListCollectionView;
    		import mx.collections.ArrayCollection;
    		import mx.managers.PopUpManager;

            protected var configControl:DisplayObject;

            protected var fieldName:String;
            protected var defaultNewName:String;
            [Bindable]
            protected var description:String;

            private var _addrSets:ArrayCollection;

            [Bindable]
            private var _visibleAddrSets:ListCollectionView;

            protected function createConfig(name:String, priority:int):void
            {
            	throw new IllegalOperationError("This should be overriden");
            }

            protected function set selectedAddrSet(addrSet:AddrSet):void
            {
            	throw new IllegalOperationError("This should be overriden");
            }

    		protected function remove(addrSet:AddrSet):void
    		{
    			throw new IllegalOperationError("This should be overriden");
    		}

            protected function save(addrSet:AddrSet):void
            {
            	throw new IllegalOperationError("This should be overriden");
            }

            protected function saveDefault(addrSet:AddrSet):void
            {
            	throw new IllegalOperationError("This should be overriden");
            }

            protected function requestConfigs():void
            {
            	throw new IllegalOperationError("This should be overriden");
            }

            private function init():void
            {
            	_addrSetBox.addChild(configControl);
                _addrSets = new ArrayCollection();

                _visibleAddrSets = new ListCollectionView(_addrSets);
                var sort:Sort = new Sort();
                sort.compareFunction = compareAddrSets;
                _visibleAddrSets.sort = sort;
                _visibleAddrSets.filterFunction = isAddrSetVisible;
                _visibleAddrSets.refresh();

                requestConfigs();
            }

            protected function setDefaultConfig(event:ResultEvent):void
            {
                var addrSet:AddrSet = new AddrSet(event.result, true);
                addrSet.addEventListener(Event.CHANGE, addrSetChanged);
                _addrSets.addItem(addrSet);
                _listAddrSet.selectedIndex = 0;
                addrSetSelected();
            }

            protected function setConfigs(event:ResultEvent):void
            {
                for each (var config:Object in ResultElf.array(event))
                {
                    var addrSet:AddrSet = new AddrSet(config);
                    addrSet.addEventListener(Event.CHANGE, addrSetChanged);
                    _addrSets.addItem(addrSet);
                }
            }

            private function ok():void
            {
                for each (var addrSet:AddrSet in _addrSets)
                {
                    if (addrSet.isDefault() && addrSet.state == AddrSet.MODIFIED)
                    {
                    	saveDefault(addrSet);
                        continue;
                    }

                    switch (addrSet.state)
                    {
                    case AddrSet.NONEXISTENT:
                    case AddrSet.UNCHANGED:
                        break;

                    case AddrSet.REMOVED:
                        remove(addrSet)
                        break;

                    case AddrSet.MODIFIED:
                    case AddrSet.NEW:
                        save(addrSet);
                        break;

                    default:
                        break;
                    }
                }

                PopUpManager.removePopUp(this);
            }

            private function isAddrSetVisible(object:AddrSet):Boolean
            {
                return object.state != AddrSet.REMOVED && object.state != AddrSet.NONEXISTENT;
            }

            private function getAddrSetName(addrSet:AddrSet):String
            {
                return (addrSet.state == AddrSet.UNCHANGED ? '' : '*') + addrSet.config.name;
            }

            private function addrSetSelected():void
            {
                var addrSet:AddrSet = _listAddrSet.selectedItem as AddrSet;
                if (addrSet == null)
                {
                    _addrSetBox.visible = false;
                    return;
                }
                _addrSetBox.visible = true;

                if (addrSet.isDefault())
                {
                    _listAddresses.dataProvider = new ArrayCollection();
                    _stack.selectedChild = _message;
                }
                else
                {
                	_stack.selectedChild = _addressesBox;
                    addrSet.config.addressSet.addresses = ResultElf.array(addrSet.config.addressSet.addresses)
                    _listAddresses.dataProvider = addrSet.config.addressSet.addresses;
                }

                selectedAddrSet = addrSet;
            }

            private function compareAddrSets(oa:Object, ob:Object, fields:Array = null):int
            {
                var a:AddrSet = oa as AddrSet;
                var b:AddrSet = ob as AddrSet;

                if (a.isDefault())
                {
                    return 1;
                }
                if (b.isDefault())
                {
                    return -1;
                }

                var dif:int = a.config.priority - b.config.priority;
                if (dif == 0)
                {
                    return 0;
                }
                else if (dif < 0)
                {
                    return -1;
                }
                else
                {
                    return 1;
                }
            }

            private function moveAddrSetUp(addrSet:AddrSet):void
            {
                swapAddrSets(addrSet, -1);
            }

            private function moveAddrSetDown(addrSet:AddrSet):void
            {
                swapAddrSets(addrSet, 1);
            }

            private function swapAddrSets(addrSet:AddrSet, offset:int):void
            {
                var ndx:int = _listAddrSet.selectedIndex;
                var otherNdx:int = ndx + offset;

                if (ndx == -1 || otherNdx < 0 || (otherNdx + 1) >= _visibleAddrSets.length)
                {
                    // can't swap with no selection, the top or bottom element, or the default (last) addrset.
                    return;
                }

                var other:AddrSet = _visibleAddrSets.getItemAt(otherNdx) as AddrSet;

                var p:int = other.config.priority;
                other.config.priority = addrSet.config.priority;
                addrSet.config.priority = p;
                _visibleAddrSets.refresh();
            }

            private function addrSetEdited(object:Object, text:String):void
            {
                var addrSet:AddrSet = AddrSet(object);
                addrSet.config.name = text;
                addrSet.changeState(AddrSet.MODIFIED);
            }

            private function addrSetAdded(object:Object, text:String):void
            {
                var priority:int = 0;
                for each (var aset:AddrSet in _addrSets)
                {
                    priority = Math.max(aset.config.priority, priority);
                }

                createConfig(text, priority+1); 
            }

            protected function configCreated(config:Object):void
            {
                var addrSet:AddrSet = new AddrSet(config);
                addrSet.addEventListener(Event.CHANGE, addrSetChanged);
                addrSet.changeState(AddrSet.NEW);
                _addrSets.addItem(addrSet);

                _listAddrSet.selectedItem = addrSet;
                addrSetSelected();
            }

            private function addrSetChanged(event:Event):void
            {
                _visibleAddrSets.refresh();
                _listAddrSet.invalidateList();
            }

            private function validateAddrSet(object:Object, text:String):String
            {
                for each (var addrSet:AddrSet in _addrSets)
                {
                    if (object != addrSet && addrSet.config.name == text)
                    {
                        return resourceManager.getString('messages', 'AddrSetManagement_nameAlreadyTaken');
                    }
                }

                return null;
            }

            private function editAddrSet(selected:AddrSet):void
            {
                if (selected == null || selected.isDefault())
                {
                    return;
                }

				var msg:String = resourceManager.getString('messages', 'AddrSetManagement_renameAddrSet_message');
				var title:String = resourceManager.getString('messages', 'AddrSetManagement_renameAddrSet_title');
                InputWindow.open(this, selected, title, msg, selected.config.name, addrSetEdited, validateAddrSet);
            }

            private function addAddrSet(selection:AddrSet):void
            {
				var msg:String = resourceManager.getString('messages', 'AddrSetManagement_newAddrSet_message');
				var title:String = resourceManager.getString('messages', 'AddrSetManagement_newAddrSet_title');
                InputWindow.open(this, null, title, msg, "", addrSetAdded, validateAddrSet);
            }

            private function removeAddrSet(addrSet:AddrSet):void
            {
                if (addrSet == null || addrSet.isDefault())
                {
                    return;
                }

                addrSet.changeState(AddrSet.REMOVED);
            }

            private function removeAddress():void
            {
                var addresses:ListCollectionView = ListCollectionView(_listAddresses.dataProvider);
                var selection:int = _listAddresses.selectedIndex;
                addresses.removeItemAt(selection);
                AddrSet(_listAddrSet.selectedItem).changeState(AddrSet.MODIFIED);
            }
            
            private function addAddress():void
            {
                var addr:String = _txtAddr.text;
                if (!NetworkAddressElf.isValidAddressDefinition(addr))
                {
                	_txtAddr.errorString = resourceManager.getString('messages', 'AddrSetManagement_invalidAddress');
                	return;
                }
                _txtAddr.errorString = null;

                var addresses:ListCollectionView = ListCollectionView(_listAddresses.dataProvider);
                if (!addresses.contains(addr))
                {
                    addresses.addItem(addr);
                    AddrSet(_listAddrSet.selectedItem).changeState(AddrSet.MODIFIED);
                }
                _listAddresses.selectedItem = addr;
                _txtAddr.text = '';
            }
    	]]>
    </mx:Script>
    <mx:HBox width="100%" height="100%" styleName="popupVBox">
        <mx:VBox height="100%">
          <mx:Label text="@Resource(key='AddrSetManagement_networkGroups', bundle='messages')" fontWeight="bold" />
          <mx:VBox width="100%" height="100%" verticalGap="0">
            <mx:List
                  id="_listAddrSet"
                  dataProvider="{_visibleAddrSets}"
                  labelFunction="getAddrSetName"
                  itemClick="addrSetSelected()"
                  doubleClickEnabled="true"
                  doubleClick="editAddrSet(_listAddrSet.selectedItem as AddrSet)"
                  height="100%" width="100%"/>
            <mx:ButtonBar
                  id="_addrSetButtonBar"
                  itemClick="this[event.item.click](_listAddrSet.selectedItem as AddrSet)">
                <mx:Array>
                    <mx:Object icon="@Embed('/img/add.gif')" click="addAddrSet" toolTip="@Resource(key='AddrSetManagement_addAddrSet', bundle='messages')" />
                    <mx:Object icon="@Embed('/img/delete2.png')" click="removeAddrSet" toolTip="@Resource(key='AddrSetManagement_removeAddrSet', bundle='messages')" />
                    <mx:Object icon="@Embed('/img/up.gif')" click="moveAddrSetUp" toolTip="@Resource(key='AddrSetManagement_moveAddrSetUp', bundle='messages')" />
                    <mx:Object icon="@Embed('/img/down.gif')" click="moveAddrSetDown" toolTip="@Resource(key='AddrSetManagement_moveAddrSetDown', bundle='messages')" />
                </mx:Array>
            </mx:ButtonBar>
          </mx:VBox>
        </mx:VBox>
        <mx:VRule height="100%" />
        <mx:VBox
              id="_addrSetBox"
              visible="false"
              height="100%" width="100%">
            <mx:ViewStack id="_stack">
            <mx:HBox id="_addressesBox">
                <mx:List
                      width="180"
                      id="_listAddresses"
                      height="100%" />
                <mx:VBox height="100%">
                    <mx:Label text="@Resource(key='AddrSetManagement_addAddressSetMessage', bundle='messages')" />
                    <mx:HBox height="100%">
                        <mx:TextInput id="_txtAddr" width="300"  keyDown="if (event.charCode == 0x0d) addAddress()"/>
                        <mx:Button id="_btnAddAddr" icon="@Embed('/img/add.gif')" click="addAddress()"/>
                    </mx:HBox>
                    <mx:Button icon="@Embed('/img/delete2.png')" toolTip="@Resource(key='AddrSetManagement_removeAddressSet', bundle='messages')" click="removeAddress()"/>
                </mx:VBox>
            </mx:HBox>
	            <mx:VBox id="_message" horizontalAlign="center">
	                <mx:Text text="{description}" textAlign="center" width="400"/>
	            </mx:VBox>
            </mx:ViewStack>
            <mx:HRule width="100%" />
        </mx:VBox>
    </mx:HBox>

    <mx:ControlBar horizontalAlign="right">
        <mx:Button label="@Resource(key='ok', bundle='messages')" click="ok()"/>
        <mx:Button label="@Resource(key='cancel', bundle='messages')" click="PopUpManager.removePopUp(this)"/>
    </mx:ControlBar>
</mx:TitleWindow>
