<?xml version="1.0" encoding="utf-8"?>
<AddrSetManagement
      xmlns:mx="http://www.adobe.com/2006/mxml"
      xmlns="org.xerela.flex.credentials.*"
      title="@Resource(key='ManageCredentials_title', bundle='messages')"
      description="@Resource(key='ManageCredentials_message', bundle='messages')">
    <mx:Script>
    	<![CDATA[
    		import org.xerela.flex.InputWindow;
    		import mx.collections.ListCollectionView;
    		import mx.collections.Sort;
    		import org.xerela.flex.services.ResultElf;
    		import mx.collections.ArrayCollection;
    		import org.xerela.flex.services.WebServiceElf;

            private var _addrSet:AddrSet;

            override protected function createConfig(name:String, priority:int):void
            {
                configCreated({
                    id: -1,
                    name: name,
                    priority: priority,
                    credentialSets: [
                        {
                            id: -1,
                            name: 'New Credentials',
                            priority: 1
                        }
                    ],
                    addressSet: {
                        id: -1,
                        addresses: []
                    }
                });
            }

            override protected function remove(addrSet:AddrSet):void
            {
            	WebServiceElf.call('credentials', 'deleteCredentialConfig', null, addrSet.config);
            }

            override protected function save(addrSet:AddrSet):void
            {
            	WebServiceElf.call('credentials', 'saveCredentialConfig', null, addrSet.config);
            }

            override protected function saveDefault(addrSet:AddrSet):void
            {
            	WebServiceElf.call('credentials', 'saveDefaultCredentialConfig', null, addrSet.config);
            }

            override protected function requestConfigs():void
            {
                WebServiceElf.call('credentials', 'getAllCredentialConfigs', setConfigs);
                WebServiceElf.call('credentials', 'getDefaultCredentialConfig', setDefaultConfig);
            }

            override protected function set selectedAddrSet(addrSet:AddrSet):void
            {
            	_addrSet = addrSet;

                var credSets:ArrayCollection = ResultElf.array(addrSet.config.credentialSets);
                addrSet.config.credentialSets = credSets;

                var sort:Sort = new Sort();
                sort.compareFunction = compareCredentialSets;
                credSets.sort = sort;
                credSets.refresh();

                _listCredSets.dataProvider = credSets;
                _listCredSets.selectedIndex = 0;
                credentialSetSelected(_listCredSets.selectedItem);
            }

            private function compareCredentialSets(a:Object, b:Object, fields:Array = null):int
            {
            	var dif:int = a.priority - b.priority
                if (dif == 0)
                {
                    return 0;
                }
                else if (dif < 0)
                {
                    return -1;
                }
                else
                {
                    return 1;
                }
            }

            private function credentialSetSelected(selected:Object):void
            {
                if (selected == null)
                {
                    _csc.visible = false;
                }
                else
                {
                    _csc.visible = true;
                    _csc.credentialSet = selected;
                }
            }

            private function editCredentialSet(credSet:Object):void
            {
                if (credSet == null)
                {
                    return;
                }

				var msg:String = resourceManager.getString('messages', 'ManageCredentials_renameCredSet_message');
				var title:String = resourceManager.getString('messages', 'ManageCredentials_renameCredSet_title');
                InputWindow.open(this, credSet, title, msg, credSet.name, credentialSetEdited);
            }

            private function addCredentialSet(selection:Object):void
            {
				var msg:String = resourceManager.getString('messages', 'ManageCredentials_newCredSet_message');
				var title:String = resourceManager.getString('messages', 'ManageCredentials_newCredSet_title');
                InputWindow.open(this, null, title, msg, "", credentialSetAdded);
            }

            private function removeCredentialSet(credSet:Object):void
            {
                if (credSet == null)
                {
                    return;
                }

                var credSets:ListCollectionView = ListCollectionView(_listCredSets.dataProvider)
                var ndx:int = credSets.getItemIndex(credSet);
                if (ndx >= 0)
                {
                    credSets.removeItemAt(ndx);
                    _addrSet.changeState(AddrSet.MODIFIED);
                }
            }

            private function credentialSetEdited(credSet:Object, name:String):void
            {
                if (credSet.name == name)
                {
                    return;
                }

                credSet.name = name;
                
                _addrSet.changeState(AddrSet.MODIFIED);
                _listCredSets.invalidateList();
            }

            private function credentialSetAdded(object:Object, name:String):void
            {
                var credSets:ListCollectionView = ListCollectionView(_listCredSets.dataProvider);

                var priority:int = 0;
                for each (var cs:Object in credSets)
                {
                    priority = Math.max(cs.priority, priority);
                }

                var credSet:Object = {
                    id: -1,
                    name: name,
                    credentialSets: [],
                    priority: priority+1
                };

                credSets.addItem(credSet);
                _addrSet.changeState(AddrSet.MODIFIED);
                credentialSetSelected(credSet);
            }

            private function moveCredentialSetUp(credSet:Object):void
            {
                swapCredentialSets(credSet, -1);
            }

            private function moveCredentialSetDown(credSet:Object):void
            {
                swapCredentialSets(credSet, 1);
            }

            private function swapCredentialSets(credSet:Object, offset:int):void
            {
                var credSets:ListCollectionView = ListCollectionView(_listCredSets.dataProvider);
                var ndx:int = _listCredSets.selectedIndex;
                var otherNdx:int = ndx + offset;

                if (ndx == -1 || otherNdx < 0 || otherNdx >= credSets.length)
                {
                    // can't swap with no selection or the top or bottom element.
                    return;
                }

                var other:Object = credSets.getItemAt(otherNdx);

                var p:int = other.priority;
                other.priority = credSet.priority;
                credSet.priority = p;
                credSets.refresh();

                _addrSet.changeState(AddrSet.MODIFIED);
            }

            private function valueChanged():void
            {
            	_addrSet.changeState(AddrSet.MODIFIED);
            }
        ]]>
    </mx:Script>
    <configControl>
        <mx:HBox id="_configArea">
            <mx:VBox height="100%">
              <mx:Label text="@Resource(key='ManageCredentials_title', bundle='messages')" fontWeight="bold" />
              <mx:VBox height="100%" verticalGap="0">
                <mx:List
                      id="_listCredSets"
                      labelField="name"
                      doubleClickEnabled="true"
                      doubleClick="editCredentialSet(_listCredSets.selectedItem)"
                      itemClick="credentialSetSelected(_listCredSets.selectedItem)"
                      height="100%" width="100%"/>
                <mx:ButtonBar itemClick="this[event.item.click](_listCredSets.selectedItem)">
                    <mx:Array>
                        <mx:Object icon="@Embed('/img/add.gif')" click="addCredentialSet" toolTip="@Resource(key='ManageCredentials_addCredentialSet', bundle='messages')" />
                        <mx:Object icon="@Embed('/img/delete2.png')" click="removeCredentialSet" toolTip="@Resource(key='ManageCredentials_removeCredentialSet', bundle='messages')" />
                        <mx:Object icon="@Embed('/img/up.gif')" click="moveCredentialSetUp" toolTip="@Resource(key='ManageCredentials_moveCredentialSetUp', bundle='messages')" />
                        <mx:Object icon="@Embed('/img/down.gif')" click="moveCredentialSetDown" toolTip="@Resource(key='ManageCredentials_moveCredentialSetDown', bundle='messages')" />
                    </mx:Array>
                </mx:ButtonBar>
              </mx:VBox>
            </mx:VBox>
            <mx:VRule height="100%" />
        	<CredentialSetControl
                  id="_csc"
                  visible="false"
                  change="valueChanged()"/>
        </mx:HBox>
    </configControl>
</AddrSetManagement>
