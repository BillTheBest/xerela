/*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Ziptie Client Framework.
 * 
 * The Initial Developer of the Original Code is AlterPoint.
 * Portions created by AlterPoint are Copyright (C) 2006,
 * AlterPoint, Inc. All Rights Reserved.
 * 
 * Contributor(s): Dylan White (dylamite@xerela.org)
 */

package org.xerela.net.adapters;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * The <code>AdapterMetadata</code> class represents all of the information that is specified in an adapter
 * metadata XML file.  An adapter metadata XML files specifies all of the information that is need to describe,
 * identifiy, and utilize an adapter and its functionality.
 * 
 * @author Dylan White (dylamite@xerela.org)
 */
@SuppressWarnings("nls")
public class AdapterMetadata
{
    /**
     * The unique adapter ID.
     */
    private String adapterID;

    /**
     * The version of the Xerela device model that this adapter is capable of populating.
     */
    private String supportedModelVersion;

    /**
     * Verbose description to describe what type of devices the adapter supports, as well as any
     * other information that may be beneficial in describing the capabilities of the adapter.
     */
    private String description;

    /**
     * The shortName is generally 25 characters are less and describes the make and model of
     * this adapter.  The {@link #description} should be more verbose.
     */
    private String shortName;

    /**
     * A regular expression used to match the software/OS version for devices supported by the adapter.
     */
    private String softwareVersionRegEx;

    /**
     * A regular expression used to match the BIOS version for devices supported by the adapter.
     */
    private String biosVersionRegEx;

    /**
     * A list of regular expressions that match an error response generated by devices supported
     * by the adapter.
     */
    private List<String> errorForms;

    /**
     * A map of all the operations that the adapter supports.  Given an operation name, a corresponding
     * <code>Operation</code> object can be retrieved if it exists.
     */
    private Map<String, Operation> operationsMap;

    /**
     * The window of time (in seconds) where no difference is considered when calculating the last reboot time
     * for devices that are supported by the adapter.
     */
    private Long lastRebootThreshold;

    /**
     * Package-accessible constructor since only the <code>AdapterService</code> class
     * should be able to create new <code>AdapterMetadata</code> objects. 
     */
    protected AdapterMetadata()
    {
        adapterID = "";
        biosVersionRegEx = "";
        description = "";
        errorForms = new LinkedList<String>();
        lastRebootThreshold = 0L;
        operationsMap = new HashMap<String, Operation>();
        softwareVersionRegEx = "";
        supportedModelVersion = "";
        shortName = "";
    }

    /**
     * Retrieves the regular expression for extracting the BIOS version from devices supported by
     * the adapter.
     * 
     * @return The regular expression for extracting the BIOS version.
     */
    public String getBiosVersionRegEx()
    {
        return biosVersionRegEx;
    }

    /**
     * Sets the regular expression that will be used for extracting the BIOS version from devices supported
     * by the adapter.
     * 
     * @param newRegEx The regular expression for extracting the BIOS version.
     */
    protected void setBiosVersionRegEx(String newRegEx)
    {
        biosVersionRegEx = newRegEx;
    }

    /**
     * Retrieves the verbose description that describes what type of devices the adapter supports, as well as any
     * other information that may be beneficial in describing the capabilities of the adapter.
     * 
     * @return A verbose description describing the adapter.
     */
    public String getDescription()
    {
        return description;
    }

    /**
     * Set the verbose description that will describe what type of devices the adapter supports, as well as any
     * other information that may be beneficial in describing the capabilities of the adapter.
     * 
     * @param description The verbose description that describes the adapter.
     */
    protected void setDescription(String newDescription)
    {
        description = newDescription;
    }

    /**
     * Retrieves the list of regular expressions that match error responses generated by devices that are supported
     * by the adapter.
     * 
     * @return The list of error-matching regular expressions.
     */
    public List<String> getErrorForms()
    {
        return errorForms;
    }

    /**
     * Adds a list of error matching regular expression to add to the existing list of error form regular expressions.
     * 
     * @param errorFormsToAdd A list of error-matching regular expressions to add to the existing error form's list.
     */
    protected void addErrorForms(List<String> errorFormsToAdd)
    {
        errorForms.addAll(errorFormsToAdd);
    }

    /**
     * Adds a new regular expression that will match an error response generated by devices that are supported
     * by the adapter to the existing list of error form regular expressions.
     * 
     * @param errorRegEx An error-matching regular expression to add.
     */
    protected void addErrorForm(String errorRegEx)
    {
        errorForms.add(errorRegEx);
    }

    /**
     * Retrieves the unique ID for the adapter.
     * 
     * @return The unique adapter ID.
     * @deprecated use {@link #getAdapterId()}
     */
    @Deprecated
    public String getAdapterID()
    {
        return adapterID;
    }

    /**
     * Retrieves the unique ID for the adapter.
     * 
     * @return The unique adapter ID.
     */
    public String getAdapterId()
    {
        return adapterID;
    }

    /**
     * Assigns a unique ID to the adapter.
     * 
     * @param id A unique adapter ID.
     * @deprecated use {@link #setAdapterId(String)}
     */
    @Deprecated
    protected void setAdapterID(String newId)
    {
        setAdapterId(newId);
    }

    /**
     * Assigns a unique ID to the adapter.
     * 
     * @param id A unique adapter ID.
     */
    void setAdapterId(String newId)
    {
        adapterID = newId;
    }

    /**
     * Retrieves the window of time (in seconds) where no difference is considered when calculating the
     * last reboot time for devices that are supported by the adapter.
     * 
     * @return The last reboot threshold time (in seconds).
     */
    public Long getLastRebootThreshold()
    {
        return lastRebootThreshold;
    }

    /**
     * Sets the window of time (in seconds) where no difference will be considered when calculating the
     * last reboot time for devices that are supported by the adapter.
     * 
     * @param newlastRebootThreshold The lastRebootThreshold to set.
     */
    protected void setLastRebootThreshold(Long newlastRebootThreshold)
    {
        lastRebootThreshold = newlastRebootThreshold;
    }

    /**
     * Retrieves the regular expression for extracting the software/OS version from devices supported by
     * the adapter.
     * 
     * @return The regular expression for extracting the software/OS version.
     */
    public String getSoftwareVersionRegEx()
    {
        return softwareVersionRegEx;
    }

    /**
     * Sets the regular expression to will be used to extract the software/OS version from devices supported
     * by the adapter.
     * 
     * @param newSoftwareVersionRegEx
     */
    protected void setSoftwareVersionRegEx(String newSoftwareVersionRegEx)
    {
        softwareVersionRegEx = newSoftwareVersionRegEx;
    }

    /**
     * Retrieves the version of the Xerela device model that this adapter is capable of populating.
     * 
     * @return A valid Xerela device model version.
     */
    public String getSupportedModelVersion()
    {
        return supportedModelVersion;
    }

    /**
     * Sets the version of the Xerela device model that this adapter is capable of populating.
     * 
     * @param newModelVersion A valid Xerela device model version.
     */
    protected void setSupportedModelVersion(String newModelVersion)
    {
        supportedModelVersion = newModelVersion;
    }

    /**
     * Retrieves the current revision number of the adapter metadata XML file.
     * 
     * @return The current revision number.
     * @deprecated this version no longer is useful or functional.  The more interesting version is the version of the bundle that contains this adapter.
     */
    public String getVersion()
    {
        return "Deprecated";
    }

    /**
     * Sets the current revision number of the adapter metadata XML file.
     * 
     * @param newVersion The current revision number to use.
     * @deprecated this version no longer is useful or functional.  The more interesting version is the version of the bundle that contains this adapter.
     */
    protected void setVersion(String newVersion)
    {
    }

    /**
     * Maps an <code>Operation</code> to a specified operation name.
     * 
     * @param operationName The name (key) of the operation.
     * @param operation The actual <code>Operation</code> to add.
     */
    protected void addOperation(String operationName, Operation operation)
    {
        operationsMap.put(operationName, operation);
    }

    /**
     * Retrieves an <code>Operation</code> that is mapped to a specified operation name/key.
     * 
     * @param operationName The name/key of the <code>Operation</code> to retrieve.
     * @return - The <code>Operation</code> found.
     */
    public Operation getOperation(String operationName)
    {
        return operationsMap.get(operationName);
    }

    /**
     * Retrieves a list of all operations specified by the adapter metadata.
     * 
     * @return A <code>List</code> of <code>Operation</code> objects that represent all of the
     * operations specified by the adapter metadata.
     */
    public List<Operation> getOperations()
    {
        List<Operation> operationsSet = new LinkedList<Operation>(operationsMap.values());
        return operationsSet;
    }

    /** {@inheritDoc} */
    @Override
    public String toString()
    {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Adapter ID: ").append(getShortName()).append("\n");
        buffer.append("Short Name: ").append(getAdapterId()).append("\n");
        buffer.append("Supported Model Version: ").append(getSupportedModelVersion()).append("\n");
        buffer.append("Revision: ").append(getVersion()).append("\n");
        buffer.append("Description: ").append(getDescription()).append("\n");
        buffer.append("Software Version RegEx: ").append(getSoftwareVersionRegEx()).append("\n");
        buffer.append("BIOS Version RegEx: ").append(getBiosVersionRegEx()).append("\n");
        buffer.append("Last Reboot Threshold: ").append(getLastRebootThreshold()).append(" (seconds)\n");

        int errorRegExCounter = 1;
        for (String errorRegEx : getErrorForms())
        {
            buffer.append("Error RegEx #").append(errorRegExCounter++).append(": ").append(errorRegEx).append("\n");
        }

        buffer.append("Operations:\n");
        for (Operation operation : getOperations())
        {
            buffer.append("[\n").append(operation).append("]\n");
        }

        return buffer.toString();
    }

    /** {@inheritDoc} */
    @Override
    public boolean equals(Object obj)
    {
        // Check to see if both objects reference the same object in memory
        if (this == obj)
        {
            return true;
        }

        // Check to see if the object passed in is valid
        if (obj == null)
        {
            return false;
        }

        try
        {
            return isEqual((AdapterMetadata) obj);
        }
        catch (ClassCastException e)
        {
            return false;
        }
    }

    private boolean isEqual(AdapterMetadata other)
    {
        // Compare all of the Adapter Metadata attributes
        if (!adapterID.equals(other.adapterID))
        {
            return false;
        }
        else if (!biosVersionRegEx.equals(other.biosVersionRegEx))
        {
            return false;
        }
        else if (!description.equals(other.description))
        {
            return false;
        }
        else if (!errorForms.equals(other.errorForms))
        {
            return false;
        }
        else if (!lastRebootThreshold.equals(other.lastRebootThreshold))
        {
            return false;
        }
        else if (!operationsMap.equals(other.operationsMap))
        {
            return false;
        }
        else if (!softwareVersionRegEx.equals(other.softwareVersionRegEx))
        {
            return false;
        }
        else if (!supportedModelVersion.equals(other.supportedModelVersion))
        {
            return false;
        }
        return true;
    }

    /** {@inheritDoc} */
    @Override
    public int hashCode()
    {
        return toString().hashCode();
    }

    /**
     * @return the shortName
     */
    public String getShortName()
    {
        return shortName;
    }

    /**
     * @param shortName the shortName to set
     */
    public void setShortName(String shortName)
    {
        this.shortName = shortName;
    }
}
