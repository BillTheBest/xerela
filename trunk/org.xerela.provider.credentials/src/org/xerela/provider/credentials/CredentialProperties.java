/*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Ziptie Client Framework.
 * 
 * The Initial Developer of the Original Code is AlterPoint.
 * Portions created by AlterPoint are Copyright (C) 2006,
 * AlterPoint, Inc. All Rights Reserved.
 * 
 * Contributor(s):
 */

package org.xerela.provider.credentials;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.eclipse.osgi.util.NLS;

/**
 * The <code>CredentialProperties</code> class provides functionality for persisting properties associated with credentials and protocols.
 * 
 * @author Dylan White (dylamite@ziptie.org)
 */
public class CredentialProperties
{
    private static final Logger LOGGER = Logger.getLogger(CredentialProperties.class);
    private static final String PROP_FILE = "credential_service.properties"; //$NON-NLS-1$

    private Properties properties;

    /**
     * Private constructor for the <code>CredentialProperties</code> class that will attempt to load up any existing properties
     * from the file-system.
     */
    private CredentialProperties()
    {
        properties = new Properties();

        // Load up our credential properties file
        InputStream in = null;
        try
        {
            LOGGER.debug(NLS.bind(Messages.loadingPropsFile, PROP_FILE));
            in = new BufferedInputStream(new FileInputStream(PROP_FILE));
            properties.load(in);
        }
        catch (FileNotFoundException e)
        {
            LOGGER.debug(NLS.bind(Messages.noPropsFileLoaded, PROP_FILE));
        }
        catch (IOException e)
        {
            LOGGER.debug(NLS.bind(Messages.noPropsFileLoaded, PROP_FILE), e);
        }
    }

    /**
     * Retrieves the singleton instance of the <code>CredentialProperties</code> class.
     * 
     * @return The singleton instance of the <code>CredentialProperties</code> class.
     */
    public static CredentialProperties getInstance()
    {
        return CredentialPropertiesSingleton.instance;
    }

    /**
     * Retrieves the <code>Properties</code> object used to store all of the credential properties.
     * 
     * @return A <code>Properties</code> object used to store all of the credential properties.
     */
    public Properties getProperties()
    {
        return properties;
    }

    /**
     * Retrieves a property value mapped to the specified key.
     * 
     * @param key The key that is mapped to the desired value.
     * @return The credential property value mapped to the specified key.
     */
    public String getProperty(String key)
    {
        return properties.getProperty(key);
    }

    /**
     * Sets a credential property by mapping a specified key to a specified value.
     * 
     * @param key The key of the credential property.
     * @param value The value of the credential property.
     */
    public void setProperty(String key, String value)
    {
        properties.setProperty(key, value);
    }

    /**
     * Saves all of the credential properties to the file-system.
     * 
     * @throws IOException If an error occurred while saving the credential properties to the file system.
     */
    public void save() throws IOException
    {
        OutputStream out = null;
        try
        {
            out = new BufferedOutputStream(new FileOutputStream(PROP_FILE));
            properties.store(out, "Generated by Xerela - DO NOT DELETE!!!"); //$NON-NLS-1$
        }
        catch (FileNotFoundException e)
        {
            LOGGER.warn(NLS.bind(Messages.noPropsFileSaved, PROP_FILE), e);
            throw e;
        }
        catch (IOException e)
        {
            LOGGER.warn(NLS.bind(Messages.noPropsFileSaved, PROP_FILE), e);
            throw e;
        }
    }

    /**
     * <code>CredentialPropertiesSingleton</code> provides a way to "lazy-load" the singleton instance of the
     * <code>CredentialProperties</code> class to by-pass the overhead of synchronizing.  This class was designed
     * for use with <code>CredentialProperties</code>'s {@link #getInstance()} method, which is designed to
     * retrieve the singleton instance of that class.
     * 
     * @author Dylan White (dylamite@ziptie.org)
     */
    private static class CredentialPropertiesSingleton
    {
        /**
         * The singleton instance of the <code>CredentialProperties</code> class.
         */
        private static CredentialProperties instance = new CredentialProperties();
    }
}
