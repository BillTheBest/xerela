#********************************************************************
# Wrapper Java Properties
#********************************************************************

# Make the working directory the base server directory.
wrapper.working.dir=../../

# Specify the "java" executable
wrapper.java.command=java

# Setup options to pass into Java
set.JAVA_OPTIONS=-server
set.JAVA_OPTIONS=%JAVA_OPTIONS% -Xmx512m
set.JAVA_OPTIONS=%JAVA_OPTIONS% -XX:MaxPermSize=128m
set.JAVA_OPTIONS=%JAVA_OPTIONS% -Djava.io.tmpdir=tmp
set.JAVA_OPTIONS=%JAVA_OPTIONS% -Dderby.system.home=derby
set.JAVA_OPTIONS=%JAVA_OPTIONS% -Djava.awt.headless=true

# Setup OSGI options
set.OSGI_OPTIONS=-Dosgi.configuration.area=osgi-config
set.OSGI_OPTIONS=%OSGI_OPTIONS% -Dosgi.noShutdown=true
set.OSGI_OPTIONS=%OSGI_OPTIONS% -Dosgi.install.area=./

# Java Additional Parameters
wrapper.java.additional.1=%JAVA_OPTIONS%
wrapper.java.additional.2=%OSGI_OPTIONS%

# Enable Xerela server debugging
#wrapper.java.additional.6=-Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y

# Specify any JARs that need to be defined within the class path.
# The JAR containing the Eclipse main class as well as the Java Service Wrapper JAR needs to both
# be located in the classpath so that the classes used for execution can be found
wrapper.java.classpath.1=core/org.eclipse.osgi_3.3.1.R33x_v20070828.jar
wrapper.java.classpath.2=ztwrapper/linux/ztwrapper.jar

# Make sure the libwrapper.so library can be found in the Java Library Path
wrapper.java.library.path.1=ztwrapper/linux

# Specify the "java.library.path" VM argument to contain the JNI library directory
# that contains the JavaHL client adapter for Subversion which is used by Xerela to allow
# for versioning of device configurations.
wrapper.java.library.path.2=/usr/lib:/usr/lib/jni:/usr/local/lib:/usr/local/lib/jni

#*******************************************************************
# Wrapper Main Properties
#*******************************************************************

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp

# Specify the Eclipse class that we need to run in order to kick off our OSGI server.
# This is needed because the first argument into the WrapperSimpleApp's main method is
# our specified main class.
wrapper.app.parameter.1=org.eclipse.core.runtime.adaptor.EclipseStarter

# Specify parameters that will be passed into the EclipseStarter main method
wrapper.app.parameter.2=-clean
wrapper.app.parameter.3=-consoleLog

#********************************************************************
# Wrapper Logging Properties
#********************************************************************

# Format of output for the console.  (See docs for formats)
wrapper.console.format=LPTM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=ztwrapper.log

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=500k

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=5

# Log the java command used when the JVM is invoked
wrapper.java.command.loglevel=INFO

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE
