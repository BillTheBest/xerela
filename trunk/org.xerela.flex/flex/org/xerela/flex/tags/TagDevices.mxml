<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
      xmlns:mx="http://www.adobe.com/2006/mxml"
      width="500" height="500"
      title="@Resource(key='tags_add_title', bundle='messages')"
      creationComplete="init()">
    <mx:Metadata>
        [ResourceBundle('messages')]
    </mx:Metadata>
    <mx:Script>
    	<![CDATA[
    		import org.xerela.flex.services.ResultElf;
    		import org.xerela.flex.services.WebServiceElf;
    		import mx.controls.CheckBox;
    		import mx.managers.PopUpManager;
    		import mx.collections.Sort;
    		import mx.collections.SortField;
    		import mx.rpc.events.ResultEvent;
    		import mx.collections.ArrayCollection;
    		import mx.collections.IList;

            [Bindable]
            private var _sharedTags:ArrayCollection;
    		[Bindable]
    		private var _tagSet:Object;
    		[Bindable]
    		private var _tagList:ArrayCollection;

    		private var _devices:String;

            /** The number of addTag calls that are outstanding. */
            private var _tagAddedCount:Number = 0;
            private var _tagsBeingAdded:Array = new Array();
            // TODO lbayer: Update Regex to work for Japanese
            private var _validationRegex:RegExp = /^(\w|_|\.|\d)+$/; // /^(\p{L}|_|\.|\d)+$/;

            public function set devices(devices:Array):void
            {
            	_devices = "";
            	for each (var device:Object in devices)
            	{
            		_devices += device.ipAddress + '@' + device.managedNetwork + ',';
            	}

                WebServiceElf.call('devicetags', 'getAllTags', allTags);
                WebServiceElf.call('devicetags', 'getIntersectionOfTags', deviceTags, _devices);
            }

            private function init():void
            {
            	if (!Xerela.hasPermission('org.xerela.tags.administer'))
                {
                    _addLine.height = 0;
                    _addLine.visible = false;
                }
            }

            private function allTags(event:ResultEvent):void
            {
                _tagSet = new Object();

                for each (var tag:String in ResultElf.array(event))
                {
                    var lower:String = tag.toLowerCase();
                    _tagSet[lower] = tag;
                }

                if (_sharedTags != null)
                {
                    populateList();
                }
            }

            private function deviceTags(event:ResultEvent):void
            {
                _sharedTags = ResultElf.array(event)
                _sharedTags.sort  = new Sort();
                _sharedTags.refresh();

                if (_tagSet != null)
                {
                    populateList();
                }
            }

            private function populateList():void
            {
                var field:SortField = new SortField("name", true);
                var sort:Sort = new Sort();
                sort.fields = [field];

                _tagList = new ArrayCollection();
                _tagList.sort = sort;
                _tagList.refresh();

                for each (var tag:String in _tagSet)
                {
                	if (!_sharedTags.contains(tag))
                	{
                        _tagList.addItem(new Tag(tag, false));
                    }
                }
            }

            private function addTagChanged():void
            {
                if (_validationRegex.exec(txtNewTag.text) == null)
                {
                    txtNewTag.errorString = resourceManager.getString('messages', 'tags_edit_invalid');
                    btnAdd.enabled = false;
                }
                else
                {
                    txtNewTag.errorString = null;
                    btnAdd.enabled = true;
                }
            }

            private function addTag():void
            {
                if (!btnAdd.enabled)
                {
                    return;
                }

                var lower:String = txtNewTag.text.toLowerCase();
                if (_tagSet[lower] == null)
                {
                   _tagList.addItem(new Tag(txtNewTag.text, true, true));
                   _tagSet[lower] = txtNewTag.text;
                }
                else
                {
                	for each (var tag:Tag in _tagList)
                	{
                		if (tag.name.toLowerCase() == lower)
                		{
                			tag.applied = true;
                		}
                	}
                }

                txtNewTag.text = "";
                txtNewTag.setFocus();
            }

            private function performOk():void
            {
		        for each (var tag:Tag in _tagList)
		        {
		        	if (tag.applied)
		        	{
			            if (tag.create)
			            {
			                WebServiceElf.call('devicetags', 'addTag', tagAdded, tag.name);
			                _tagsBeingAdded.push(tag.name);
			            }
	                    else
	                    {
			                WebServiceElf.call('devicetags', 'tagDevices', null, tag.name, _devices);
	                    }
	                }
		        }
		        PopUpManager.removePopUp(this);
            }

            private function tagAdded(event:ResultEvent):void
            {
                _tagAddedCount++;
                if (_tagAddedCount == _tagsBeingAdded.length)
                {
                    tagWithNewTags();
                }
            }

            private function tagWithNewTags():void
            {
                for each (var tag:String in _tagsBeingAdded)
                {
	                WebServiceElf.call('devicetags', 'tagDevices', null, tag, _devices);
                }

                PopUpManager.removePopUp(this);
            }
    	]]>
    </mx:Script>
    <mx:VBox height="100%" width="100%" styleName="popupVBox">
        <mx:Text text="@Resource(key='tags_add_message', bundle='messages')" width="98%"/>
        <mx:HBox width="100%" height="100%">
            <mx:VBox width="100%" height="100%">
                <mx:Label text="@Resource(key='tags_add_tagsToAdd', bundle='messages')" />
		        <!-- TODO lbayer: Check/uncheck on space or enter pressed -->
		        <mx:List id="list" width="100%" height="100%" dataProvider="{_tagList}">
		            <mx:itemRenderer>
		                <mx:Component>
		                    <mx:CheckBox label="{data.name}" selected="{data.applied}" change="data.applied = !data.applied" />
		                </mx:Component>
		            </mx:itemRenderer>
		        </mx:List>
            </mx:VBox>
            <mx:VBox width="100%" height="100%">
                <mx:Label text="@Resource(key='tags_add_shared', bundle='messages')" />
    	        <mx:List width="100%" height="100%" dataProvider="{_sharedTags}" />
            </mx:VBox>
        </mx:HBox>
        <mx:HBox width="100%" id="_addLine">
            <mx:TextInput
                id="txtNewTag"
                width="100%"
                maxChars="255" 
                change="addTagChanged()"
                enter="addTag()" />
            <mx:Button id="btnAdd" label="@Resource(key='add', bundle='messages')" click="addTag()"/>
        </mx:HBox>
    </mx:VBox>

    <mx:ControlBar horizontalAlign="right">
        <mx:Button label="@Resource(key='ok', bundle='messages')" click="performOk()"/>
        <mx:Button label="@Resource(key='cancel', bundle='messages')" click="PopUpManager.removePopUp(this)"/>
    </mx:ControlBar>
</mx:TitleWindow>
