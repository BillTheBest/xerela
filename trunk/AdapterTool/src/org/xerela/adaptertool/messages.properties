DiscoverCli.identified=%s identified as %s\n
DiscoverCli.eventDetails=Details of the Discovery Test\n-----------------------------------------
DiscoverCli.specifyIpAddress=IP to discover:
DiscoverCli.invalidIp=Invalid IP Address:  
AtConfigElf.specifyAdapterDirectory=Specify the Adapter Plug-in directory (e.g. "c:\\Program Files\\Xerela Server\\adapters"): 
AtConfigElf.specifyToolsDirectory=Specify the Tool Plug-in directory (e.g. "c:\\Program Files\\Xerela Server\\tools"): 
AtConfigElf.directoryDoesNotExist=Directory does not exist\!
AtConfigElf.firstRun=This appears to be the first time the AdapterTool has been run.
AtConfigElf.noAdaptersConfigured=No adapters directory is configured\n
AtConfigElf.noToolsConfigured=No tool plugin directory is configured\n
AtConfigElf.oldDirDoesNotExist=The previously configured directory no longer exists. (%s)\n
AtConfigElf.configHeader=The AdapterTool configuration settings
AdapterCli.validatedSuccessfully=Validated successfully.
AdapterCli.invalidCredentialSpec=Invalid Credential Specification
AdapterCli.specifyHost=Specify the host: 
AdapterCli.specifyProtocolSet=Specify the protocol set: 
AdapterCli.availableAdapters=Available adapters...
AdapterCli.noAdapters=There are no available adapters...exiting
AdapterCli.selectAdapter=Select an adapter: 
AdapterCli.unknownAdapterId=Unknown Adapter ID\!
AdapterCli.executingOperation=Executing '%s' using '%s'...\n
AdapterCli.restoreSpecifyFile=Specify the location of the file to promote (e.g. "/home/rkruse/startup-config"): 
AdapterCli.restoreSpecifyFilePath=Specify the full path of this file, including the name, on the device (e.g. "/etc/named.conf"): 
AdapterCli.restoreFileMissing=Unable to locate the file
AdapterCli.restoreFileWarning=**** NOTICE ****\nThe restore file is now encoded directly inside the generated XML.\nEach restore operation using this XML for input will promote the\nencoded contents and not the file at 
AdapterCli.filestoreRoot=Specify the directory where we should keep the OS images: 
AdapterCli.filestoreRootMissing=Unable to find the directory 
AdapterCli.telemetryCalculateAdminIp=Calculate the best administrative IP address? Yes or no? 
ScriptToolCli.availableTools=Available script tools...
ScriptToolCli.selectTool=Select a script tool: 
ScriptToolCli.selectToolBundle=Select an existing Tool plug-in: 
ScriptToolCli.scriptParameters=Fill out the user defined parameters for the tool... 
ScriptToolCli.parametersFromXerela=Fill out parameters that will be provided to your tool by Xerela... 
ScriptToolCli.noTools=No tools were found...exiting 
ScriptToolCli.invalidSelection=You have made an invalid selection...exiting
ScriptToolCli.badInputFile=The properties file '%s' doesn't exist\n
ScriptToolCli.runningCommand=The full command to run this tool is...
ScriptToolCli.deviceSelected=Enter details for device number %s...\n
ScriptToolCli.anotherDevice=Would you like to enter another device? 
ScriptToolCli.createStepOne=Would you like to....\n  1: Create a new plug-in for your Tool\n  2: Add your Tool to an existing plug-in\nChoose an option:  
ScriptToolCli.newBundleName=Name the new plug-in (e.g. xerela.tools.juniper.junos): 
ScriptToolCli.newToolType=What type of tool do you want to create?\n  1: Device communication via the command line (SSH/Telnet)\n  2: Device communication via SNMP\n  3: Other\nChoose an option:  
ScriptToolCli.newToolHeader=Provide information about your new Tool.... 
ScriptToolCli.newToolDisplayName=  Display name: 
ScriptToolCli.newToolTooltip=  Tooltip: 
ScriptToolCli.adapterForLogin=An existing adapter will be used to login to devices. 
CreateAdapter.noFilesToCopy=No files to copy in directory 
CreateAdapter.creatingDirectory=Creating directory %s\n
CreateAdapter.copyingFile=Copying file %s to %s\n
CreateAdapter.adapterId=Adapter ID (e.g. Xerela::Adapters::Cisco::IOS): 
CreateAdapter.adapterAlreadyExists=Adapter with the same ID already exists.
CrateAdapters.invalidAdapterBundle=\ is not a valid bundle.
CreateAdapter.adapterMustBeValidPerlModule=Adapter ID must be a valid Perl module name (e.g. Xerela::Adapters::Cisco::IOS).
CreateAdapter.adapterBundle=Adapter bundle [%s]: 
CrateAdapters.unknownBundle=Unknown Bundle\!
CreateAdapter.shortName=Short name (e.g. Cisco IOS): 
CrateAdapters.invalidID=Invalid Crate ID.
CreateAdapter.description=Description (e.g. Cisco Routers/Switches/Aironets with IOS): 
CrateAdapters.creatingZip=Creating zip: 
CrateAdapters.specifyName=Specify the crate name
AdapterCli.usage=\
Primary Usage: adapterTool [-x] [-a adapterId] [-c credentialKey=value] [-h ip-address]\n            [-p protocol-set] [-i input-file] [-o operation] [--novalidate]\n\
\n  \
Performs an adapter operation against a device. If no options are\n  \
specified you will be prompted for missing information.\n  \
Options:\n    \
-x           Output the operation input XML and exit.\n                 Don't actually run the operation.\n    \
-o           Specify the operation to execute on the adapter.\n                 Defaults to "backup"\n    \
-a           Specify the adapter to use.\n    \
-i           Specify the operation input XML file.  The contents\n                 of this file take precedence over any specified arguments.\n    \
-r           Enable the recording of device interactions to an XML file.\n                 The recording XML file will be written out to the AdapterTool directory.\n    \
-h           Specify the IP address of the device to perform the\n                 operation against.\n    \
-p           Specify the protocol set to use for the operation.\n                 (eg: Telnet-TFTP, SSH-SCP, etc)\n    \
-c KEY=VALUE Set the value for a credential.\n    \
--novalidate Disable validation of the adapter output.\n    \
--logLevel   Specifies the desired logging level for adapter operations.\n                 The supported logging levels are "0" for DEBUG and FATAL logging, and "1" for FATAL logging only.\n    \
--logToFile  Redirects all adapter operation log output to a file.\n                 The syntax of this file is "adapterName_adapterOperation_ipAddress.log", for example\n                 "IOS_backup_10.10.10.10.log".\n    \
\n\
Discovery Usage: adapterTool --discover [-c community-string] [ip-address ...]\n\
\n  \
Tests discovery for specified devices.  If no arguments are\n  specified you will be prompted for a device.\n  \
Options:\n    \
-c   Specify the SNMP read community string to use for communication\n         with the devices.  Defaults to "public"\n\
\n\
Tool Plug-in Usage: adapterTool --tool [-i input-file] [-p] [-c]\n\
\n  \
Run a Tool Plug-in.\n  \
Options:\n    \
-i      Specify a properties file to supply to the run of the Tool Plug-in.\n    \
-p      Don't run the tool, just ask the questions for the tool input and output\n            \a properties file to STDOUT.  Redirect this output to a file and then run\n            \with the '-i' afterwards.\n    \
-c      Run a wizard to create a new Tool Plug-in.\n    \
\n\
Create Usage: adapterTool --create\n  \
Start the adapter creation wizard.  No other arguments should\n  be supplied.\n\
\n\
List Adapters: adapterTool --list\n  \
Lists all the known adapters.  No other arguments should be\n  supplied.\n\
\n\
Initialize: adapterTool --init\n  \
Reset the saved adapters directory.\n\
\n\
Package: adapterTool --crate [-i ID] [-n Name] [-v version] [[-d dir] ...]\n  \
Creates a crate zip of adapters or tools so they may be uploaded to the ZipForge.\n  \
Options:\n    \
-d      Specify the directory of the bundle to crate.\n            (more than one may be specified)\n    \
-i      The ID to use for the new crate.\n    \
-v      The version to use for the new crate.\n    \
-n      The name to use for the new crate.\n  \
If only an Adapter Directory is specified the name, version, and ID of the\n  adapter bundle will be used for the crate.\n\
\n\
Test: adapterTool --test [-o output] <test-file|dir> ...\n  \
Executes a set of regression tests.  \n  \
Options:\n    \
-o      Specify the file to write the test execution summary to.\n\
\n  \
DiffX is used to perform XML diffs.\n  \
You can get a copy of DiffX from http://www.topologi.com/diffx/)\n\
\n\
Make Test (Coming Soon): --mktest [-z] [-r recording] [-o testname]\n  \
Creates a test definition.\n  \
Options:\n    \
-r      The recording file to create a test from.\n    \
-o      The name given to the test.\n    \
-z      Zip the created test files into a concise package.\n\
\n\
Examples:\n \
adapterTool -a Xerela::Adapters::Cisco::IOS -h 10.100.22.6 -p Telnet-TFTP\n      -c username=testlab -c password=hobbit -c enablePassword=bigtex\n \
adapterTool -o restore\n \
adapterTool --discover -c private 10.1.1.1 10.1.1.2 10.2.2.1\n \
adapterTool --tool -p > myTool.properties\n \
adapterTool --tool -i myTool.properties\n \
\n
AdapterCli.version=Xerela AdapterTool version: 
CrateAdapters.addingZipEntry=Adding entry: 
CrateAdapters.invalidVersion=Invalid version.
CrateAdapters.availableBundles=Available Bundles...
CrateAdapters.selectBundle=Select a bundle: 
CrateAdapters.invalidInput=Invalid input.
CrateAdapters.specifyCrateID=Specify a Crate ID
CrateAdapters.specifyVersion=Specify the version
